{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor example_motor = motor(PORT1, false);\ncontroller Controller = controller();\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       stop/start button.cpp                                                  \n//    Author:       Scytzea                                                  \n//    Created:      March 30, 2023                                                  \n//    Description:  Code so that you can use the same button to start/stop a motor \n//                  dm me on discord @scytzea!!#0012, if you have any issues <3                                              \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n//defining the boolean\nbool startStop;\n\n//when started make sure its true\nint whenStarted1() {\n  startStop = true;\n  return 0;\n}\n\n//making and if/then statement, if its true,\n//then it will make the motor spin, if not\n//the motor will stop\nvoid onevent_ControllerButtonEUp_pressed_0() {\n  if (startStop == true){\n    example_motor.spin(forward);\n    startStop = false;\n    //make sure to set it to false so when hit again\n    //it stops\n  } else {\n    example_motor.stop();\n    startStop = true;\n    //make sure to set it to true so when hit again\n    //it starts\n  }\n}\n","textLanguage":"cpp","rconfig":[{"port":[1],"name":"example_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"}}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}